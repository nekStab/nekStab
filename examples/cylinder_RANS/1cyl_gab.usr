#include "experimental/rans_komg.f"

c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c
c- constants -----------------------------------------------------------

c #define tSTATSTART 0.0d0  /* start time for averaging */
c #define tSTATFREQ  writeInterval  /* output frequency for statistics */

c data extraction along wall normal direction
#define INTP_NMAX 200 /* number of sample points */

c mesh dimensions
#define BETAM 2.4     /* wall normal stretching parameter */
#define PI (4.*atan(1.))
c     
c-----------------------------------------------------------------------

      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg
      real rans_mut,rans_mutsk,rans_mutso,rans_turbPrandtl
      real mu_t, Pr_t
      integer icalld
      save    icalld
      data    icalld /0/

      character(len=80)   :: filename

      e = gllel(eg)

      if(uparam(1).le.3.1) then

        Pr_t=rans_turbPrandtl()
        mu_t=rans_mut(ix,iy,iz,e)

        if(ifield.eq.1) then      !momentum equation
          t(ix,iy,iz,e,4)=mu_t/cpfld(ifield,1) !store eddy viscosity for post processing
          udiff  = cpfld(ifield,1) + mu_t
          utrans = cpfld(ifield,2)
        elseif(ifield.eq.2) then  !energy equation
          udiff  = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
          utrans = cpfld(ifield,2)
        elseif(ifield.eq.3) then  !k equation;     use rho and mu from field 1
          udiff  = cpfld(1,1)+rans_mutsk(ix,iy,iz,e)
          utrans = cpfld(1,2)
        elseif(ifield.eq.4) then  !omega equation; use rho and mu from field 1
          udiff  = cpfld(1,1)+rans_mutso(ix,iy,iz,e)
          utrans = cpfld(1,2)
        endif

c      elseif((uparam(1).eq.3).or.(uparam(1).eq.3.1).or.(uparam(1).eq.3.2)) then

c        write(6,*)'CHECK 02'
        
c        if(ifield.eq.1) then
c          udiff  = cpfld(ifield,1) + t(ix,iy,iz,e,4)
c          utrans = cpfld(ifield,2)
c        endif

c      else

c        if(nid.eq.0)write(6,*)'Error: bad uparam(1)!'
c        call nek_end

      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      integer ix,iy,iz,e,eg

      e = gllel(eg)
      
      if(uparam(1).le.2) then

        ffx = 0.0
        ffy = 0.0
        ffz = 0.0
      
      elseif((uparam(1).eq.3).or.(uparam(1).eq.3.1)) then

        ! Direct equations
        ffx = 0.0
        ffy = 0.0
        ffz = 0.0
      
      elseif(uparam(1).eq.3.2) then

        ! Adjoint equations
        ffx = 0.0
        ffy = 0.0
        ffz = 0.0

      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg
      real rans_kSrc,rans_omgSrc
      real rans_kDiag,rans_omgDiag

      e = gllel(eg)

      if(uparam(1).le.3.1) then

        if(ifield.eq.3) then
          qvol = rans_kSrc(ix,iy,iz,e)
          avol = rans_kDiag(ix,iy,iz,e)
        elseif(ifield.eq.4) then
          qvol = rans_omgSrc(ix,iy,iz,e)
          avol = rans_omgDiag(ix,iy,iz,e)
        else
          qvol = 0.0
        endif

c      elseif((uparam(1).eq.3).or.(uparam(1).eq.3.1)) then

c        ! Direct equations
c        qvol = 0.0
      
c      elseif(uparam(1).eq.3.2) then

c        ! Adjoint equations
c        qvol = 0.0

      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
      integer ix,iy,iz,iside,e,eg

      e  = gllel(eg)

C     U, TKE, and Omg are all zero on the wall 
      if (JP.eq.0) then         ! velocity
         ux = 1.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp=0.0d0
      else                      ! perturbation
         ux = 0.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg

      e = gllel(eg)

      if (JP.eq.0) then         ! velocity
         ux=1.0d0
         uy=0.0d0
         uz=0.0d0
         temp=0.0d0
         if(ifield.eq.3) temp = 0.01
         if(ifield.eq.4) temp = 0.2
      else                      ! perturbation
         ux = 0.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp = 0.0d0
         if(ifield.eq.3) temp = 0.0d0
         if(ifield.eq.4) temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'
      include 'RANS_KOMG'
      
      parameter (lxyz=lx1*ly1*lz1)
      integer, parameter :: lt  = lx1*ly1*lz1*lelv
      integer, parameter :: lt2 = lx2*ly2*lz2*lelv
      real wd, tiny
      common /walldist/ wd(lx1,ly1,lz1,lelv)
      common /storesom/ St_mag2(lx1*ly1*lz1,lelv)
      real ypmin,ypmax,ypave,utmin,utmax,utave,alpha,uxx,uyy
      real h1,l2,semi,linf,residu0,residu,rate
      real desired_tolerance
      save residu0,desired_tolerance

      real x0(3)
      data x0 /0.0, 0.0, 0.0/ 
      save x0

      integer icalld
      save    icalld
      data    icalld /0/

      real atime,timel
      save atime,timel

      integer ntdump
      save    ntdump

      parameter(nstat=16)
      real ravg(lx1*ly1*lz1*lelt,nstat)
      save ravg

      save dragx_avg

      real, dimension(lt) :: uavgf, vavgf, wavgf
      save uavgf, vavgf, wavgf
      real, dimension(lt) :: uavgfn, vavgfn, wavgfn
      real, dimension(lt) :: ufmf , vfmf , wfmf
      real, dimension(lt) :: urmsf, vrmsf, wrmsf
      real, dimension(lt) :: uvfmf, uwfmf, vwfmf
      real, dimension(lt) :: vxtmp, vytmp, vztmp
      real, dimension(lt2):: prtmp, prfmf
      save prfmf
      real, dimension(lt) :: ttmp
      real, dimension(lt) :: tketmp, tkefmf
      save tkefmf
      real, dimension(lt) :: omegatmp, omegafmf
      save omegafmf
      real, dimension(lt) :: mutfmf
      real tfmf(lt,ldimt-1)

      real tSTATSTART, tSTATFREQ

      character(len=80)   :: filename

      logical ifvot,ifpot,iftot,ifverbose

      integer bIDs(1)
      save iobj_wall

      n    = nx1*ny1*nz1*nelv
      n2   = nx2*ny2*nz2*nelv
      tSTATSTART = 0.0d0
      tSTATFREQ  = 1.0d0

      !if(istep.eq.0) call gfldr("1cyl0.fXXXXX")

      call nekStab

      if (jp .eq. 0) then
 
c       define objects for surface integrals
        if (istep.eq.0) then
          bIDs(1) = 1
          call create_obj(iobj_wall,bIDs,1)
          nm = iglsum(nmember(iobj_wall),1)
          if(nid.eq.0) write(6,*) 'obj_wall nmem:', nm 
          call prepost(.true.,'  ')
        endif 

c       call estimate_strouhal

        scale = 2./uparam(3)  ! Cd = F/(.5 rho U^2 S) = 2*F/S
        if (mod(istep,50).eq.0) call torque_calc(scale,x0,.true.,.false.)
        
!       write out probes
        if (mod(ISTEP,10).eq.0) call hpts()

        if (mod(istep,10).eq.0) then
        call print_limits !monitor the solution
        call y_p_limits(wd,ypmin,ypmax,ypave,utmin,utmax,utave)
          if(nio.eq.0) then
            write(6,256)'y_p+',ypmin,ypmax,ypave
            write(6,256)'u_tau',utmin,utmax,utave
            write(6,*)
          endif
        endif

 256    format(a15,3es13.4)

        ubar = glsc2(vx,bm1,n)/volvm1
        e2   = glsc3(vy,bm1,vy,n)+glsc3(vz,bm1,vz,n)
        e2   = e2/volvm1
        if (nfield.gt.1) then
          tmn  = glmin(t,n)
          tmx  = glmax(t,n)
        endif
        if(nid.eq.0) write(6,2) time,ubar,e2
 2             format(1p5e13.4,' monitor')

        if (time.lt.tSTATSTART) return

c
c      What follows computes some statistics ...
c

        if(icalld.eq.0) then
          if(nid.eq.0) write(6,*) 'Start collecting statistics ...'
          call rzero(ravg,size(ravg))
          call rzero(uavgf,lt)
          call rzero(vavgf,lt)
          call rzero(wavgf,lt)
          dragx_avg = 0
          atime     = time
          timel     = time
          ntdump    = int(time/tSTATFREQ)
c         if(nid.eq.0) write(6,*) 'ntdump = ', ntdump
          residu0   = 0.0d0
          desired_tolerance = 2.9e-7 !min(param(21),param(22))
          if(nid.eq.0) write(6,*) 'desired_tolerance = ',desired_tolerance
          
          if(time.ne.0) then
c         --> Load the mean flow
            do i=1,lt
              vxtmp(i)    = vx(i,1,1,1)
              vytmp(i)    = vy(i,1,1,1)
              vztmp(i)    = vz(i,1,1,1)
              prtmp(i)    = pr(i,1,1,1)
              ttmp(i)     = t(i,1,1,1,1)
              tketmp(i)   = t(i,1,1,1,ifld_k-1)
              omegatmp(i) = t(i,1,1,1,ifld_omega-1)
            enddo
            write(filename,'(a,a,a)')'vm_',trim(SESSION),'0.f00091'
            call load_fld(filename)
            call opcopy(uavgfn, vavgfn, wavgfn, vx, vy, vz)
            write(filename,'(a,a,a)')'vfm',trim(SESSION),'0.f00091'
            call load_fld(filename)
            call opcopy(ufmf,  vfmf,  wfmf,  vx, vy, vz)
            write(filename,'(a,a,a)')'rms',trim(SESSION),'0.f00091'
            call load_fld(filename)
            call opcopy(urmsf, vrmsf, wrmsf, vx, vy, vz)
            write(filename,'(a,a,a)')'vt_',trim(SESSION),'0.f00091'
            call load_fld(filename)
            call opcopy(uvfmf, uwfmf, vwfmf, vx, vy, vz)
            write(filename,'(a,a,a)')'tur',trim(SESSION),'0.f00091'
            call load_fld(filename)
            call opcopy(tkefmf, omegafmf, vz, vx, vy, vz)
            call copy(prfmf,pr,n2)
            call copy(mutfmf,t(1,1,1,1,1),n)
            ravg(:,1)  = uavgfn
            ravg(:,2)  = vavgfn
            ravg(:,3)  = wavgfn
            ravg(:,4)  = ufmf
            ravg(:,5)  = vfmf
            ravg(:,6)  = wfmf
            ravg(:,7)  = urmsf
            ravg(:,8)  = vrmsf
            ravg(:,9)  = wrmsf
            ravg(:,10) = uvfmf
            ravg(:,11) = uwfmf
            ravg(:,12) = vwfmf
            ravg(:,13) = prfmf
            ravg(:,14) = tkefmf
            ravg(:,15) = omegafmf
            ravg(:,16) = mutfmf
            do i=1,lt
              vx(i,1,1,1)             = vxtmp(i)
              vy(i,1,1,1)             = vytmp(i)
              vz(i,1,1,1)             = vztmp(i)
              pr(i,1,1,1)             = prtmp(i)
              t(i,1,1,1,1)            = ttmp(i)
              t(i,1,1,1,ifld_k-1)     = tketmp(i)
              t(i,1,1,1,ifld_omega-1) = omegatmp(i)
            enddo
          endif

          icalld = 1
        endif

        dtime = time  - timel
        atime = atime + dtime

        ! averaging over time
        if (atime.ne.0. .and. dtime.ne.0.) then
          beta      = dtime / atime
          alpha     = 1. - beta

          ifverbose = .false.
          call avg1(ravg(1,1) ,vx      ,alpha,beta,n,'uavg',ifverbose)
          call avg1(ravg(1,2) ,vy      ,alpha,beta,n,'vavg',ifverbose)
          call avg1(ravg(1,3) ,vz      ,alpha,beta,n,'wavg',ifverbose)
          call avg1(ravg(1,13),pr      ,alpha,beta,n,'pavg',ifverbose)
          call avg1(ravg(1,14),t(1,1,1,1,ifld_k-1),alpha,beta,n,'kavg',ifverbose)
          call avg1(ravg(1,15),t(1,1,1,1,ifld_omega-1),alpha,beta,n,'oavg',ifverbose)
          call avg1(ravg(1,16),t(1,1,1,1,4),alpha,beta,n,'mavg',ifverbose)

          call torque_calc(1.0,x0,.false.,.false.) ! compute wall shear
          dragx_avg = alpha*dragx_avg + beta*dragx(iobj_wall)

          uavgfn = ravg(:,1)
          vavgfn = ravg(:,2)
          wavgfn = ravg(:,3)
          do i=1,lt
            urmsf(i) = vx(i,1,1,1) - uavgfn(i)
            vrmsf(i) = vy(i,1,1,1) - vavgfn(i)
            wrmsf(i) = vz(i,1,1,1) - wavgfn(i)
          enddo

          call avg1(ravg(1,4) ,urmsf      ,alpha,beta,n,'ufav',ifverbose) 
          call avg1(ravg(1,5) ,vrmsf      ,alpha,beta,n,'vfav',ifverbose)
          call avg1(ravg(1,6) ,wrmsf      ,alpha,beta,n,'wfav',ifverbose)
          call avg2(ravg(1,7) ,urmsf      ,alpha,beta,n,'urms',ifverbose)
          call avg2(ravg(1,8) ,vrmsf      ,alpha,beta,n,'vrms',ifverbose)
          call avg2(ravg(1,9) ,wrmsf      ,alpha,beta,n,'wrms',ifverbose)
          call avg3(ravg(1,10),urmsf,vrmsf,alpha,beta,n,'uvfa',ifverbose)
          call avg3(ravg(1,11),urmsf,wrmsf,alpha,beta,n,'uwfa',ifverbose)
          call avg3(ravg(1,12),vrmsf,wrmsf,alpha,beta,n,'vwfa',ifverbose)

          call opsub2(uavgfn,vavgfn,wavgfn,uavgf,vavgf,wavgf)
          call normvc(h1,semi,l2,linf,uavgfn,vavgfn,wavgfn)
          residu = l2; rate = abs(residu-residu0)/dt; residu0 = residu
          if(nid.eq.0) then
            open(unit=10,file='residu_rans.dat')
            write(10,"(4E15.7)")time,residu,rate
          endif

          uavgf     = ravg(:,1)
          vavgf     = ravg(:,2)
          wavgf     = ravg(:,3)
          ufmf      = ravg(:,4)
          vfmf      = ravg(:,5)
          wfmf      = ravg(:,6)
          urmsf     = sqrt(ravg(:,7))
          vrmsf     = sqrt(ravg(:,8))
          wrmsf     = sqrt(ravg(:,9))
          uvfmf     = ravg(:,10)
          uwfmf     = ravg(:,11)
          vwfmf     = ravg(:,12)
          prfmf     = ravg(:,13)
          tkefmf    = ravg(:,14)
          omegafmf  = ravg(:,15)
          mutfmf    = ravg(:,16)

          tfmf(:,1) = t(1,1,1,1,1)
          tfmf(:,2) = tkefmf
          tfmf(:,3) = omegafmf

          if( istep.gt.100 .and. residu .lt. desired_tolerance )then
            if(nid.eq.0)write(6,*)' Converged mean flow to: ',desired_tolerance
            ifbfcv = .true.
            call bcast(ifbfcv  , lsize)
            param(63) = 1       ! Enforce 64-bit output
            call bcast(param,200*wdsize)
            ifvo=.true.; ifpo=.true.; ifto=.true.
            call filter_s0(uavgf,0.5,1,'vortx')
            call filter_s0(vavgf,0.5,1,'vortx')
            call filter_s0(wavgf,0.5,1,'vortx')
            call filter_s0(prfmf,0.5,1,'vortx')
            call filter_s0(tfmf, 0.5,1,'vortx')
            call outpost2(uavgf, vavgf, wavgf, prfmf, tfmf, ldimt-1, 'MF_')
            param(63) = 0       ! Enforce 32-bit output
            call bcast(param,200*wdsize)
            call nek_end
          endif

        endif

        timel = time

        ! write statistics to file
c       if(nid.eq.0)write(6,*)'time  = ',time
c       if(nid.eq.0)write(6,*)'time2 = ',(ntdump+1)*tSTATFREQ
        if(istep.gt.0 .and. time.gt.(ntdump+1)*tSTATFREQ) then
                    
          ifvot=ifvo; ifpot=ifpo; iftot=ifto
          ifvo=.true.; ifpo=.true.; ifto=.true.
          call filter_s0(uavgf,0.5,1,'vortx')
          call filter_s0(vavgf,0.5,1,'vortx')
          call filter_s0(wavgf,0.5,1,'vortx')
          call filter_s0(prfmf,0.5,1,'vortx')
          call filter_s0(tfmf, 0.5,1,'vortx')
          call outpost2(uavgf, vavgf, wavgf, prfmf, tfmf, ldimt-1, 'vm_')
          ifvo=.true.; ifpo=.false.; ifto=.false.
          call filter_s0(ufmf, 0.5,1,'vortx')
          call filter_s0(vfmf, 0.5,1,'vortx')
          call filter_s0(wfmf, 0.5,1,'vortx')
          call outpost(ufmf , vfmf , wfmf , pr, t, 'vfm')
          call filter_s0(urmsf,0.5,1,'vortx')
          call filter_s0(vrmsf,0.5,1,'vortx')
          call filter_s0(wrmsf,0.5,1,'vortx')
          call outpost(urmsf, vrmsf, wrmsf, pr, t, 'rms')
          call filter_s0(uvfmf,0.5,1,'vortx')
          call filter_s0(vwfmf,0.5,1,'vortx')
          call filter_s0(vwfmf,0.5,1,'vortx')
          call outpost(uvfmf, uwfmf, vwfmf, pr, t, 'vt_')
          call filter_s0(prfmf,0.5,1,'vortx')
          call filter_s0(tkefmf,0.5,1,'vortx')
          call filter_s0(omegafmf,0.5,1,'vortx')
          ifvo=.true.; ifpo=.true.; ifto=.true.
          call outpost(tkefmf, omegafmf, vz, prfmf, mutfmf, 'tur')
          do i=1,lt
            omegatmp(i) = t(i,1,1,1,4)
          enddo
          call filter_s0(omegatmp,0.5,1,'vortx')
          ifvo=.false.; ifpo=.false.; ifto=.true.
          call outpost(vx, vy, vz, pr, omegatmp, 'mut')
          ifvo=ifvot; ifpo=ifpot; ifto=iftot

          ntdump = ntdump + 1
          if (nid.ne.0) goto 998 

          rho    = param(1)
          dnu    = param(2)
          A_w    = uparam(3)
          tw     = dragx_avg / A_w
          u_tau  = sqrt(tw / rho)
          Re_tau = u_tau / dnu
          tplus  = time * u_tau**2 / dnu
          
          if(nid.eq.0) write(6,*)'tau_w ' ,istep,time,tw
          if(nid.eq.0) write(6,*)'u_tau ' ,istep,time,u_tau
          if(nid.eq.0) write(6,*)'Re_tau' ,istep,time,Re_tau
 998    endif

      else                      
c       --> Load the eddy viscosity of the base flow
        write(6,*)'CHECK 01'
        if(icalld.eq.0) then
          if(nid.eq.0) write(6,*) 'Loading base flow eddy viscosity for stability ...'
            do i=1,lt
              vxtmp(i)    = vx(i,1,1,1)
              vytmp(i)    = vy(i,1,1,1)
              vztmp(i)    = vz(i,1,1,1)
              prtmp(i)    = pr(i,1,1,1)
              ttmp(i)     = t(i,1,1,1,1)
            enddo
            write(filename,'(a,a,a)')'MF_',trim(SESSION),'0.f00001'
            call load_fld(filename)
            call opcopy(uavgf,vavgf,wavgf,vx,vy,vz)
            call copy(prfmf,pr,n2)
            call copy(mutfmf,t(1,1,1,1,1),n)
            do i=1,lt
              vx(i,1,1,1)             = vxtmp(i)
              vy(i,1,1,1)             = vytmp(i)
              vz(i,1,1,1)             = vztmp(i)
              pr(i,1,1,1)             = prtmp(i)
              t(i,1,1,1,1)            = ttmp(i)
            enddo
            icalld = 1
        endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine nekStab_usrchk
      include 'SIZE'
      include 'TOTAL'

      if(istep.eq.0)then !change defaults

        k_dim = int(uparam(7)) ; call bcast(k_dim,isize)
        schur_tgt = 0 ; call bcast(schur_tgt,isize)
        maxmodes = 10 ; call bcast(maxmodes,isize)
        ifres = .false. ; call bcast(ifres,lsize)
        ifvor = .true. ; call bcast(ifvor,lsize)
        ifvox = .true. ; call bcast(ifvox,lsize)
        iffindiff = .false. ; call bcast(iffindiff,lsize)

      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer n,iel,ifc,id_face

      integer ifld_k,ifld_t,m_id,w_id
      real coeffs(30) !array for passing custom coeffs to RANS model
      logical ifcoeffs !flag to use custom or default coeffs

      n=nx1*ny1*nz1*nelv
      
      if(ifheat)then
       cbc(:,:,2)=cbc(:,:,1)
       do iel=1,nelt
        do ifc = 1, 2*ndim
         if(cbc(ifc,iel,1).eq.'W  ')cbc(ifc,iel,2)='t  '
         if(cbc(ifc,iel,1).eq.'v  ')cbc(ifc,iel,2)='t  '
        enddo
       enddo
      endif

C     Setup RANS model, this MUST be done in usrdat2

      ifld_k = 3         !field number for tke, t(1,1,1,1,ifld_k-1)
      ifld_t = 4         !field number for omega/tau, t(1,1,1,1,ifld_t-1)
      ifcoeffs = .false. !set to true to pass custom coefficients

C     Available models:
c     m_id = 0 !regularized standard k-omega 
c     m_id = 1 !regularized low-Re k-omega
      m_id = 2 !regularized standard k-omega SST
c     m_id = 3 !non-regularized standard k-omega (NOT SUPPORTED)
c     m_id = 4 !standard k-tau
c     m_id = 5 !low-Re k-tau
c     m_id = 6 !standard k-tau SST

C     Wall distance function:
c     w_id = 0 ! user specified
c     w_id = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
      w_id = 2 ! distf (coordinate difference, provides smoother function)

      call rans_init(ifld_k,ifld_t,ifcoeffs,coeffs,w_id,wd,m_id)

c     mark faces for object definition
      do iel=1,nelv
         do ifc = 1,2*ndim
            if (cbc(ifc,iel,1) .eq. 'W  ') then
               boundaryID(ifc,iel) = 1
            endif
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end

c automatically added by makenek
      subroutine usrdat0()

      return
      end

c automatically added by makenek
      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
      integer*8 glo_num(1)

      return
      end
c-----------------------------------------------------------------------
      subroutine RANSplot(pt1,pt2,lpts)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real pt1(ldim),pt2(ldim)
      integer npts,lpts,iplot

      character*32 fname
      character*14 afmt
      character*10 rfmt
      integer intp_h,i,j,nt,nfld
      save intp_h
      logical ifset,ifdo
      real dx,pts(lhis,ldim)
      real fwrk(lx1*ly1*lz1*lelt,ldim+1+ldimt)
      real fpts(lhis*(ldim+1+ldimt))
      real uout(lhis),vout(lhis),wout(lhis)
      real prout(lhis),tout(lhis,ldimt)
      character*4 outname(ldim+1+ldimt)

      real rwrk(lhis,ldim+1)
      integer iwrk(lhis,3)
      save rwrk,iwrk

      save ifdo,ifset
      data ifdo /.true./
      data ifset /.true./

      save iplot
      data iplot /1/

      if(.not.ifdo) return

      nt=lx1*ly1*lz1*nelt

      npts=max(lpts,2)
      if(npts.gt.lhis) then
        if(nio.eq.0) write(*,*)
     &       "Error, recompile with lhis in SIZE >= ",npts
        ifdo=.false.
        return
      endif

      call rzero(pts,npts*ndim)
      do j=1,ndim
        pts(1,j)=pt1(j)
        dx=(pt2(j)-pt1(j))/(real(npts-1))
        do i=2,npts
          pts(i,j)=pts(i-1,j)+dx
        enddo
      enddo

      if(ifset)then
        ifset=.false.
        call interp_setup(intp_h,0.0,0,nelt)
      endif

      nfld=0
      if(ifvo) then
        write(outname(1),'(a4)')"VELX"
        write(outname(2),'(a4)')"VELY"
        call copy(fwrk(1,1),vx,nt)
        call copy(fwrk(1,2),vy,nt)
        nfld=2
      endif
      if(if3d.and.ifvo)then
        nfld=nfld+1
        write(outname(nfld),'(a4)')"VELZ"
        call copy(fwrk(1,nfld),vz,nt)
      endif
      if(ifpo) then
        nfld=nfld+1
        write(outname(nfld),'(a4)')"PRES"
        call copy(fwrk(1,nfld),pr,nt)
      endif
      if(ifheat) then
        if(ifto) then
          nfld=nfld+1
          write(outname(nfld),'(a4)')"TEMP"
          call copy(fwrk(1,nfld),t,nt)
        endif
        do i=1,ldimt-1
          if(ifpsco(i)) then
            nfld=nfld+1
            write(outname(nfld),'(a2,i2)')"PS",i
            call copy(fwrk(1,nfld),t(1,1,1,1,i+1),nt)
          endif
        enddo
      endif

      if(nfld.gt.0) then
        call blank(fname,32)
        if(iplot.lt.10) then
          write(fname,'(a,i1,a)') "plot",iplot,".dat"
        elseif(iplot.lt.100) then
          write(fname,'(a,i2,a)') "plot",iplot,".dat"
        else
          write(fname,'(a,i3,a)') "plot",iplot,".dat"
        endif

        if(nio.eq.0) then
          write(*,*)'   Writing line plot data to file ',fname
          if(if3d)then
            write(*,'(7x,3es15.6)')pt1(1),pt1(2),pt1(3)
            write(*,'(7x,3es15.6)')pt2(1),pt2(2),pt2(3)
          else
            write(*,'(7x,2es15.6)')pt1(1),pt1(2)
            write(*,'(7x,2es15.6)')pt2(1),pt2(2)
          endif
          write(*,*)
        endif

        call interp_nfld(fpts,fwrk,nfld,pts(1,1),pts(1,2),pts(1,3),npts
     &                                    ,iwrk,rwrk,lhis,.true.,intp_h)

        call blank(afmt,14)
        call blank(rfmt,10)
        if(if3d) then
          write(afmt,'(a1,i2,a11)')"(",nfld+3,"a16,es16.8)"
          write(rfmt,'(a1,i2,a7)')"(",nfld+3,"es16.8)"
        else
          write(afmt,'(a1,i2,a11)')"(",nfld+2,"a16,es16.8)"
          write(rfmt,'(a1,i2,a7)')"(",nfld+2,"es16.8)"
        endif

        if(nio.eq.0) then
          open(unit=10,file=fname,status='unknown',form='formatted')
          if(if3d) then
            write(10,afmt)"X","Y","Z",(outname(i),i=1,nfld),time
          else
            write(10,afmt)"X","Y",(outname(i),i=1,nfld),time
          endif
          do i=1,npts
            if(if3d) then
              write(10,rfmt)pts(i,1),pts(i,2),pts(i,3)
     &                               ,(fpts(i+j),j=0,(npts*nfld-1),npts)
            else
              write(10,rfmt)pts(i,1),pts(i,2)
     &                               ,(fpts(i+j),j=0,(npts*nfld-1),npts)
            endif
          enddo
        endif

        close(10)

        iplot=iplot+1
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine get_limits(phi,phimin,phimax,phiave,dphi,phip,rmsphi,n)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer i,n,ntot,iglsum
      real phi(1),phip(1),phimin,phimax,phiave,dphi,rmsphi
      real glmin,glmax,glsc2,glsum

      ntot=iglsum(n,1)

      rmsphi=0.0
      dphi=0.0
      if(istep.ge.1) then
        do i=1,n
          dphi=max(dphi,abs(phip(i)-phi(i)))
          rmsphi=rmsphi+(phip(i)-phi(i))**2
        enddo
        rmsphi=glsum(rmsphi,1)
        rmsphi=sqrt(rmsphi/DBLE(ntot))/dt
      endif
      dphi=glmax(dphi,1)
      dphi=dphi/dt

      phimin=glmin(phi,n)
      phimax=glmax(phi,n)
      phiave=glsc2(phi,bm1,n)/volvm1

      return
      end
C-----------------------------------------------------------------------
      subroutine get_limits_nodt(phi,phimin,phimax,phiave)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer n
      real phi(1),phimin,phimax,phiave
      real glmin,glmax,glsc2

      n=nx1*ny1*nz1*nelv

      phimin=glmin(phi,n)
      phimax=glmax(phi,n)
      phiave=glsc2(phi,bm1,n)/volvm1

      return
      end
c-----------------------------------------------------------------------
      subroutine y_p_limits(wd,ypmin,ypmax,ypave,utmin,utmax,utave)
      implicit none
      include 'SIZE'
      include 'TOTAL'

C     calculate min, max, and average y_p+ and u_tau values

      integer e,i,i0,i1,j,j0,j1,k,k0,k1,iw,jw,kw,i2,j2
      integer ipt,wpt,estrd,isd,jsd
      real msk(lx1,ly1,lz1,lelv)
      real gradu(lx1*ly1*lz1,3,3),wd(1)
      real tau(3),norm(3),vsca,tauw,utau,rho,mu
      real ypmin,ypmax,yp,ypave,vol,utmin,utmax,utave
      real glmin,glmax,glsum
      logical ifgrad, ifdid

      data ifdid /.false./
      save ifdid, msk

      ypmin=1.0d30
      ypmax=-1.0d30
      ypave=0.0
      utmin=1.0d30
      utmax=-1.0d30
      utave=0.0
      vol=0.0

C     first build the mask
      if(.not.ifdid)then
        ifdid=.true.
        call rone(msk,nx1*ny1*nz1*nelv)
        do e=1,nelv
          do isd=1,2*ndim
            if(cbc(isd,e,1).eq.'W  ') then
              call backpts(i0,i1,j0,j1,k0,k1,isd)
              do k=k0,k1
              do j=j0,j1
              do i=i0,i1
                msk(i,j,k,e)=0.0
              enddo
              enddo
              enddo
            endif
          enddo
          do isd=1,2*ndim
            if(cbc(isd,e,1).eq.'W  ') then
              call facind(i0,i1,j0,j1,k0,k1,lx1,ly1,lz1,isd)
              do k=k0,k1
              do j=j0,j1
              do i=i0,i1
                msk(i,j,k,e)=1.0
              enddo
              enddo
              enddo
            endif
          enddo
        enddo
        call dssum(msk,nx1,ny1,nz1) !for elements with edges but not faces along a wall
      endif

      do e=1,nelv
        ifgrad=.true.
        do isd=1,2*ndim
          if(cbc(isd,e,1).eq.'W  ')then
            estrd=(e-1)*nx1*ny1*nz1
            if(ifgrad)then
              call gradm11(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),vx,e)
              call gradm11(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),vy,e)
              if(if3d)
     &         call gradm11(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),vz,e)
              ifgrad=.false.
            endif
            call backpts(i0,i1,j0,j1,k0,k1,isd)
            do k=k0,k1
            do j=j0,j1
            do i=i0,i1
              if(msk(i,j,k,e).lt.0.5) then
                iw=i
                jw=j
                kw=k
                if    (isd.eq.1) then
                  jw=1
                elseif(isd.eq.2) then
                  iw=nx1
                elseif(isd.eq.3) then
                  jw=ny1
                elseif(isd.eq.4) then
                  iw=1
                elseif(isd.eq.5) then
                  kw=1
                else
                  kw=nx1
                endif
                call getSnormal(norm,iw,jw,kw,isd,e)
                ipt=i +(j -1)*nx1+(k -1)*nx1*ny1
                wpt=iw+(jw-1)*nx1+(kw-1)*nx1*ny1

                mu=vdiff(iw,jw,kw,e,1)
                rho=vtrans(iw,jw,kw,e,1)

                do i2=1,ldim
                tau(i2)=0.0
                  do j2=1,ldim
                    tau(i2)=tau(i2)+
     &                   mu*(gradu(wpt,i2,j2)+gradu(wpt,j2,i2))*norm(j2)
                  enddo
                enddo

                vsca=0.0
                do i2=1,ldim
                  vsca=vsca+tau(i2)*norm(i2)
                enddo

                tauw=0.0
                do i2=1,ldim
                  tauw=tauw+(tau(i2)-vsca*norm(i2))**2
                enddo
                tauw=sqrt(tauw)
                utau=sqrt(tauw/rho)
                yp=wd(ipt+estrd)*utau*rho/mu
                ypmin=min(ypmin,yp)
                ypmax=max(ypmax,yp)
                ypave=ypave+yp*bm1(i,j,k,e)
                utmin=min(utau,utmin)
                utmax=max(utau,utmax)
                utave=utave+utau*bm1(i,j,k,e)
                vol=vol+bm1(i,j,k,e)
              endif
            enddo
            enddo
            enddo
          endif
        enddo
      enddo

      ypmin=glmin(ypmin,1)
      ypmax=glmax(ypmax,1)
      ypave=glsum(ypave,1)
      utmin=glmin(utmin,1)
      utmax=glmax(utmax,1)
      utave=glsum(utave,1)
      vol=glsum(vol,1)
      ypave=ypave/vol
      utave=utave/vol

      return
      end
c-----------------------------------------------------------------------
      subroutine backpts(i0,i1,j0,j1,k0,k1,isd)
      implicit none
      include 'SIZE'

      integer i0,i1,j0,j1,k0,k1,isd

      i0=1
      j0=1
      k0=1
      i1=nx1
      j1=ny1
      k1=nz1
      if(isd.eq.1) then
        j0=2
        j1=2
      elseif(isd.eq.2) then
        i0=nx1-1
        i1=nx1-1
      elseif(isd.eq.3) then
        j0=ny1-1
        j1=ny1-1
      elseif(isd.eq.4) then
        i0=2
        i1=2
      elseif(isd.eq.5) then
        k0=2
        k1=2
      elseif(isd.eq.6) then
        k0=nz1-1
        k1=nz1-1
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine print_limits
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real vol,glsum,glmin,glmax,glsc2
      real tmp(lx1*ly1*lz1*lelv)
      integer i,n1,n2,nt

      real uxmin,uxmax,uxave,uymin,uymax,uyave,uzmin,uzmax,uzave
      real prmin,prmax,prave
      real thmin(ldimt),thmax(ldimt),thave(ldimt)
      real rmsux,rmsuy,rmsuz,rmspr,rmsth(ldimt)
      real dux,duy,duz,dpr,dth(ldimt)
      character*15 tname

      n1=nx1*ny1*nz1*nelv
      n2=nx2*ny2*nz2*nelv
      nt=nx1*ny1*nz1*nelt

      call get_limits(vx,uxmin,uxmax,uxave,dux,vxlag,rmsux,n1)
      call get_limits(vy,uymin,uymax,uyave,duy,vylag,rmsuy,n1)
      if(if3d) call get_limits(vz,uzmin,uzmax,uzave,duz,vzlag,rmsuz,n1)
      call get_limits(pr,prmin,prmax,prave,dpr,prlag,rmspr,n2)
      if(ifheat)then
        do i=1,npscal+1
          if(idpss(i).eq.0) call get_limits(t(1,1,1,1,i),thmin(i) !Helmholtz solver
     &          ,thmax(i),thave(i),dth(i),tlag(1,1,1,1,1,i),rmsth(i),nt)
          if(idpss(i).eq.1) call get_limits_nodt(t(1,1,1,1,i) !CVODE solver
     &                      ,thmin(i),thmax(i),thave(i))
        enddo
      endif

      if(nio.eq.0) then
        write(*,*)
        write(*,254) 'limits','min','max','ave','max d/dt','rms d/dt'
        write(*,255) 'u velocity',uxmin,uxmax,uxave,dux,rmsux
        write(*,255) 'v velocity',uymin,uymax,uyave,duy,rmsuy
        if(if3d) write(*,255) 'w velocity',uzmin,uzmax,uzave,duz,rmsuz
        write(*,255) 'pressure',prmin,prmax,prave,dpr,rmspr
        if(ifheat) then
          do i=1,npscal+1
            if(i.eq.1) write(tname,'(a15)') "temperature"
            if(i.gt.1) write(tname,'(a14,i1)') "PS ",i-1
            if(idpss(i).eq.0)write(*,255)
     &               tname,thmin(i),thmax(i),thave(i),dth(i),rmsth(i)
            if(idpss(i).eq.1)write(*,256)
     &               tname,thmin(i),thmax(i),thave(i),'--','--'
          enddo
        endif
        write(*,*)
      endif

 254  format(a15,5a13)
 255  format(a15,5es13.4)
 256  format(a15,3es13.4,2a13)

      return
      end
c-----------------------------------------------------------------------
      subroutine estimate_strouhal

      include 'SIZE'
      include 'TOTAL'

      real tlast,vlast,tcurr,vcurr,t0,t1
      save tlast,vlast,tcurr,vcurr,t0,t1
      data tlast,vlast,tcurr,vcurr,t0,t1 / 6*0 /

      integer e,eg,eg0,e0

      eg0 = 622          ! Identify element/processor in wake
      mid = gllnid(eg0)
      e0  = gllel (eg0)

      st  = 0

      if (nid.eq.mid) then

         tlast = tcurr
         vlast = vcurr

         tcurr = time
         vcurr = vy (1,ny1,1,e0)

         xcurr = xm1(1,ny1,1,e0)
         ycurr = ym1(1,ny1,1,e0)

         write(6,2) istep,time,vcurr,xcurr,ycurr
    2    format(i9,1p4e13.5,' vcurr')

         if (vlast.gt.0.and.vcurr.le.0) then ! zero crossing w/ negative slope
            t0  = t1
            t1  = tlast + (tcurr-tlast)*(vlast-0)/(vlast-vcurr)
            per = t1-t0
            if (per.gt.0) st = 1./per
         endif
      endif

      st = glmax(st,1)

      n  = nx1*ny1*nz1*nelv
      ux = glamax(vx,n)
      uy = glamax(vy,n)

      if (nid.eq.0.and.st.gt.0) write(6,1) istep,time,st,ux,uy
    1 format(i5,1p4e12.4,' Strouhal')

      return
      end
c-----------------------------------------------------------------------

