#!/bin/bash
set -a

#-------------------------------------------------------------------------------
# NekStab config
#-------------------------------------------------------------------------------
# Ensure to modify SIZE:
#    parameter (lpelt=lelt)
#    include 'NEKSTAB.inc'
#-------------------------------------------------------------------------------
# Add to .bashrc:
# export NEKSTAB_SOURCE_ROOT="$HOME/nekStab" #--> path to nekStab
# export PATH=$NEKSTAB_SOURCE_ROOT/bin:$PATH
# export NEK_SOURCE_ROOT="$NEKSTAB_SOURCE_ROOT/Nek5000"
# export PATH=$NEK_SOURCE_ROOT/bin:$PATH
#-------------------------------------------------------------------------------
# OPTIONAL COMPILER SETTINGS
#-------------------------------------------------------------------------------

# check presence of Intel compiler in the enviroment
if command -v mpiifort -v 2>/dev/null; then
    echo "Intel compiler found:"
    echo $(mpiifort -v)
    export FC="mpiifort"
    export CC="mpiicc"
    export FFLAGS+=" -extend-source" # support to long lines
    
    if command -v $(which mpiifort) 2>/dev/null | grep -q oneapi; then
        echo "OneAPI detected."
        export FFLAGS+=" -qmkl" # do not use xHost with OneAPI
    else # Parallel Studio
        echo "OneAPI not detected."
        export FFLAGS+=" -mkl -xHost"
    fi
    
    export USR_LFLAGS+=" -I${MKLROOT}/include -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl" #optional link for old versions
    export FFLAGS+=" -g -traceback" # Intel tracer 
    # #export FFLAGS+=" -fpe0 -debug extended" # debugger
else
    echo "GCC compiler found:"
    echo " version $(gcc --version | grep ^gcc | sed 's/^.* //g')"
    export FC="mpif90"
    export CC="mpicc"
    # Fortran flags 
    export FFLAGS+=" -ffixed-line-length-none" # support to long lines (REQUIRED)
    export FFLAGS+=" -march=native" # target native architecture 
    export FFLAGS+=" -ffast-math -fomit-frame-pointer -funroll-loops" # extra speed

    # warning flags
    export FFLAGS+=" -w" # disable all warnings
    #export FFLAGS+=" -Wall -Wextra" # activate all warnings
    #export FFLAGS+=" -Wno-conversion -Wno-unused-dummy-argument -Wno-compare-reals" # disable unused warnings
    
    # debug flags
    export FFLAGS+=" -fbacktrace" # main debug
    #export FFLAGS+=" -Og -g -ggdb -finit-real=nan -ffpe-trap=invalid,zero -fsanitize=leak" # full debug
fi

case $(uname -s) in
    Darwin) case $(uname -p) in
            x86_64) ar="x86_64" 
            #echo "Darwin-x86-64 architecture identified"
            #export FFLAGS+=" -mcmodel=large"
            ;;
            arm)  ar="arm" 
            #echo "Darwin-arm architecture identified"
            # export FFLAGS+=" -mcmodel=small"
            # Generate code for the small code model. The program and its statically defined symbols must be within 4GB of each other. Pointers are 64 bits. Programs can be statically or dynamically linked. 
            # This is the default code model.
            ;;
        esac
        ;;

    Linux) case $(uname -p) in
            x86_64) ar="x86_64" 
            #echo "Linux-x86-64 architecture identified"
            export FFLAGS+=" -mcmodel=large"
            ;;
            arm)  ar="arm"
            #echo "Linux-arm architecture identified"
            ;;
        esac
        ;;
esac

###############################################################################
# DONT'T TOUCH WHAT FOLLOWS !!!
###############################################################################

# control version flags for user reference
export N_VERSION=$(cd $NEK_SOURCE_ROOT && git describe --tag --long --always)
export NS_VERSION=$(cd $NEKSTAB_SOURCE_ROOT && git describe --tag --long --always)
export FFLAGS+=" -DNVERSION=\"'${N_VERSION}'\" -DNSVERSION=\"'${NS_VERSION}'\""
export USR="krylov_subspace.o\
    matvec.o \
    krylov_decomposition.o \
    eigensolvers.o \
    lapack_wrapper.o \
    fixedp.o \
    usr_extra.o \
    utils.o \
    IO.o \
    postproc.o \
    newton_krylov.o \
    sensitivity.o \
    "

echo "Nek5000 version: "$N_VERSION
echo " using source path: $NEK_SOURCE_ROOT"
echo "nekStab version: "$NS_VERSION
echo " using source path: $NEKSTAB_SOURCE_ROOT"
echo "preparing compilation with:"
x=($(which $FC; echo $FFLAGS $USR_LFLAGS))
echo "${x[@]}"

# copy static variables file to NEKSTAB.inc
cp -v $NEKSTAB_SOURCE_ROOT/core/NEKSTAB NEKSTAB.inc

echo "include $NEKSTAB_SOURCE_ROOT/core/makefile_nekStab" > makefile_usr.inc
echo "generating makefile_usr.inc ... done"

set +a -e
$NEK_SOURCE_ROOT/bin/nekconfig $@
if [[ $1 != "clean" ]]; then
 $NEK_SOURCE_ROOT/bin/nekconfig -build-dep
 set -o pipefail
 touch $1.usr 
 make -j4 2>&1 | tee -a build.log
 set +o pipefail
fi