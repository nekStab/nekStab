#!/bin/bash
set -a # export all variables and functions defined in the script

# Check if the script is called with the "clean" argument
if [[ $1 == "clean" ]]; then
    echo "Cleaning up build files..."
    make clean
    echo "Removing session and log files..."
    rm -f SESSION.NAME *log* makefile makefile_usr.inc NEKSTAB.inc *.mod
    rm -f KRY* HES*
    echo "Cleanup completed."
    exit 0
fi

# Fetch version information to print in the initialisation message
N_VERSION=$(git -C $NEK_SOURCE_ROOT describe --tag --long --always)
NS_VERSION=$(git -C $NEKSTAB_SOURCE_ROOT describe --tag --long --always)

#-------------------------------------------------------------------------------
# Compiler Detection
#-------------------------------------------------------------------------------
if command -v mpiifort >/dev/null 2>&1; then
    echo "Compiler found: $(which mpiifort)"
    echo "$(mpiifort --version | head -n1)"

    # set default compiler to Intel
    FC="mpiifort"
    CC="mpiicc"

    FFLAGS+=" -fixed" # Nek5000 is in fixed form .f, while NekStab is in free form .f90
    FFLAGS+=" -extend-source" # Accepts line with longer than 72 characters (132 characters)

    # if command -v mpiifx >/dev/null 2>&1; then ### EXPERIMENTAL ! 

    # CRASHING  Error in generalev, info=           7           6          -1

    #     echo "Using Intel oneAPI Compiler ..." # LLVM compiler

    #     # Found LLVM compiler so we use it
    #     FC="mpiifx"
    #     CC="mpiicx"

    #     # Check the link line advisor for the correct flags with MKL
    #     # https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl-link-line-advisor.html

    #     export PPLIST="VENDOR_BLAS"
    #     FFLAGS+=" -qmkl=sequential -I${MKLROOT}/include" # using LP64 and NOT double precision integer ILP64
    #     USR_LFLAGS+=" -Wl,--start-group ${MKLROOT}/lib/libmkl_intel_lp64.a ${MKLROOT}/lib/libmkl_sequential.a ${MKLROOT}/lib/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl" # using static link

    # else # mpiifort

        echo "Using Intel Compiler Classic..."
        # FFLAGS+=" -xHost" # comment if already included
        
        # FFLAGS+=" -fp-model source" 
        # FFLAGS+=" -fp-model fast=2"  
        # FFLAGS+=" -no-prec-div"  
        
        # for other older Intel compilers
        # FFLAGS+=" -diag-disable=6375  
        # FFLAGS+=" -diag-disable=10441  

        #for oneAPI 2023.1 and Classic compiler
        # FFLAGS+=" -qmkl=sequential" # we are using LP64 and NOT 64bit integer in ILP64
        # FFLAGS+=" -diag-disable=10441 -w"
        # CFLAGS+=" -diag-disable=10441"

        export PPLIST="VENDOR_BLAS"
        FFLAGS+=" -mkl=sequential -I${MKLROOT}/include" # using LP64 and NOT 64bit integer in ILP64
        USR_LFLAGS+=" -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl" # using static link

    # fi # LLVM compiler

    # Ricardo's debugging flags
    # FFLAGS+=" -g3 -traceback" # Enables stack tracing.
    # FFLAGS+=" -fpe-all=0" # Floating point exception trapping.
    # FFLAGS+=" -debug extended" # Enables all runtime checks.
    # FFLAGS+=" -check all,nobounds,nouninit" # Nek500 fails for array subscript/character substring expressions and uninitialized variables.
    # FFLAGS+=" -warn all,noexternal,nointerfaces -diag-enable remark" 
    # FFLAGS+=" -stand f18" # adhere strictly to the standards of f90/f95/f03/f08/f15 

else # GCC

    if [[ $(uname -s) == "Darwin" ]]; then
        FC="mpif77" # macOS with arm crashes with mpif90
    else
        FC="mpif90" # otherwise we use mpif90
    fi
    CC="mpicc"

    echo "Compiler found: $(which $FC)"
    echo "$($FC --version | head -n1)"

    FFLAGS+=" -ffixed-form"             # Enables fixed-form source code, necessary as we mix .f90 files.
    FFLAGS+=" -ffixed-line-length-none" # Allows for any line length in fixed-form source code.

    # FFLAGS+=" -g fbacktrace"           # Enables debugging information.
    # FFLAGS+=" -fanalyzer" # Enable the Clang Static Analyzer for code analysis
    # FFLAGS+=" -Ofast" # Enable aggressive optimization level for maximum performance
    # FFLAGS+=" -ffast-math" # Enable fast math optimizations for floating-point operations
    # FFLAGS+=" -funsafe-math-optimizations" # Enable unsafe math optimizations for improved performance

    # comment Nek5000/core/makenek.inc:226 with : sed -i '226s/^/#/' $HOME/nextStab/Nek5000/core/makenek.inc
    #FFLAGS+=" -std=legacy -w" # Provides a backtrace in case of errors, useful for debugging.
    #FFLAGS+=" -std=legacy -Wall" # Provides a backtrace in case of errors, useful for debugging.

    export PPLIST="VENDOR_BLAS"
    if [[ $(uname -s) == "Darwin" ]]; then
        USR_LFLAGS+=" -framework Accelerate"
    else
        USR_LFLAGS+=" -llapack -lblas"
    fi

    # Linking with OPENBLAS instead of LAPACK/BLAS (optional)
    # USR_LFLAGS+=" -I/usr/local/opt/openblas/include -L/usr/local/opt/openblas/lib -lopenblas"

fi
LD="$FC" # Linker (default to Fortran compiler)
#-------------------------------------------------------------------------------
# Architecture Detection
#-------------------------------------------------------------------------------
case $(uname -s) in
Darwin)
    case $(uname -m) in
    x86_64)
        ;;
    arm64)
        FFLAGS+=" -mcmodel=small" # no support for large
        ;;
    esac
    ;;
Linux)
    case $(uname -p) in
    x86_64)
        FFLAGS+=" -mcmodel=large"
        ;;
    arm) # not tested
        ;;
    esac
    ;;
esac
#-------------------------------------------------------------------------------
# Final Preparations
#-------------------------------------------------------------------------------
FFLAGS+=" -DNVERSION=\"'${N_VERSION}'\" -DNSVERSION=\"'${NS_VERSION}'\""
export FFLAGS

# User-specified object files
USR="krylov_subspace.o"
USR+=" matvec.o"
USR+=" quicksort.o"
USR+=" krylov_decomposition.o"
USR+=" eigensolvers.o"
USR+=" lapack_wrapper.o"
USR+=" fixedp.o"
USR+=" main.o"
USR+=" utils.o"
USR+=" IO.o"
USR+=" postproc.o"
USR+=" newton_krylov.o"
USR+=" sensitivity.o"
USR+=" forcing.o"
USR+=" nek_vectors.o"

# Check if the makefile_usr file exists and source it
if [ -f "makefile_usr" ]; then
    source makefile_usr
fi
export USR

# Output summary of settings
echo "Nek5000 version: $N_VERSION"
echo "nekStab version: $NS_VERSION"
echo "preparing compilation with: $(
    which $FC
    echo $FFLAGS $USR_LFLAGS
)"

# Update makefile and static variables
cp -v $NEKSTAB_SOURCE_ROOT/core/NEKSTAB NEKSTAB.inc

# appends `include 'NEKSTAB.inc'` to `SIZE` if not present.
FILE="SIZE"
INCLUDE_LINE="include 'NEKSTAB.inc'" # respect spaces
grep -q "^ *$INCLUDE_LINE" "SIZE" || echo -e "\n      $INCLUDE_LINE" >> "$FILE"

# Define the file and the include line
FILE="makefile_usr.inc"
INCLUDE_LINE="include $NEKSTAB_SOURCE_ROOT/core/makefile_nekStab"
# Check if the file exists
if [ -f "$FILE" ]; then
    # Check if an include line for makefile_nekStab is in the file
    if grep -q "^include .*makefile_nekStab" "$FILE"; then
        # The include line is in the file, replace it
        if [[ $(uname -s) == "Darwin" ]]; then
            sed -i '' "s|^include .*makefile_nekStab|$INCLUDE_LINE|" "$FILE"
        else
            sed -i "s|^include .*makefile_nekStab|$INCLUDE_LINE|" "$FILE"
        fi
    else
        # The include line is not in the file, append it
        echo -e "\n$INCLUDE_LINE" >>"$FILE"
    fi
else
    # The file does not exist, create it with the include line
    echo "$INCLUDE_LINE" >"$FILE"
fi

: ${NEK_SOURCE_ROOT:="$HOME/Nek5000"}
set +a -e
$NEK_SOURCE_ROOT/bin/nekconfig $@
$NEK_SOURCE_ROOT/bin/nekconfig -build-dep
set -o pipefail
touch $1.usr 
make -j4 2>&1 | tee -a build.log
set +o pipefail

if [ $(ls *.mod 2>/dev/null | wc -l) -gt 0 ]; then
    mv *.mod obj
fi