#!/bin/bash
set -a # export all variables and functions defined in the script

# Compiler and architecture settings
FC="mpif90"   # default (changed from mpif77)
CC="mpicc"    # default
FFLAGS=""     # fortran flags
CFLAGS=""     # c flags
USR_LFLAGS="" # linking flags
ar=""         # architecture specific

# Fetch version information to print in the initialisation message
N_VERSION=$(git -C $NEK_SOURCE_ROOT describe --tag --long --always)
NS_VERSION=$(git -C $NEKSTAB_SOURCE_ROOT describe --tag --long --always)

#-------------------------------------------------------------------------------
# Compiler Detection
#-------------------------------------------------------------------------------
if command -v mpiifort >/dev/null 2>&1; then
    echo "Compiler found: $(which mpiifort)"
    echo "$(mpiifort --version | head -n1)"

    FC="mpiifort"
    CC="mpiicc"

    #https://www.intel.com/content/www/us/en/docs/fortran-compiler/developer-guide-reference/2023-0/fixed.html 
    FFLAGS+=" -fixed" # Nek5000 is in fixed form .f, while NekStab is in free form .f90
    
    # https://www.intel.com/content/www/us/en/docs/fortran-compiler/developer-guide-reference/2023-0/extend-source.html
    FFLAGS+=" -extend-source" # Accepts line with longer than 72 characters (132 characters)

    if command -v mpiifx >/dev/null 2>&1; then

        echo "Using Intel oneAPI Compiler ..."

        FC="mpiifx"
        CC="mpiicx"

        CFLAGS+=" -w -Wno-unused-command-line-argument"
        FFLAGS+=" -xHost"

        # Check the link line advisor for the correct flags with MKL
        # https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl-link-line-advisor.html

        export PPLIST="VENDOR_BLAS"
        FFLAGS+=" -qmkl=sequential" # we are using LP64 and NOT double precision integer ILP64
        USR_LFLAGS+=" -I${MKLROOT}/include  -Wl,--start-group ${MKLROOT}/lib/libmkl_intel_lp64.a ${MKLROOT}/lib/libmkl_sequential.a ${MKLROOT}/lib/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl"


    else # mpiifort

        echo "Using Intel Compiler Classic..."
        #FFLAGS+=" -xHost" # comment if already included
        
        # FFLAGS+=" -fp-model source" 
        FFLAGS+=" -fp-model fast=2"  
        FFLAGS+=" -no-prec-div"  
        # FFLAGS+=" -diag-disable 6375  

        export PPLIST="VENDOR_BLAS"
        FFLAGS+=" -mkl=sequential" # we are using LP64 and NOT 64bit integer in ILP64
        # static link
        #USR_LFLAGS+=" -I${MKLROOT}/include -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl"

        # dynamic link
        USR_LFLAGS+=" -I${MKLROOT}/include -L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl"

    fi

    # https://www.intel.com/content/www/us/en/docs/fortran-compiler/developer-guide-reference/2023-0/g-002.html
    FFLAGS+=" -g3" # Enables stack tracing.
    FFLAGS+=" -traceback" # Enables stack tracing.

    #https://www.intel.com/content/www/us/en/docs/fortran-compiler/developer-guide-reference/2023-0/debug-linux-and-macos.html
    #FFLAGS+=" -debug all" # Enables all debugging information.
    FFLAGS+=" -debug extended" # Enables all runtime checks.

    # https://www.intel.com/content/www/us/en/docs/fortran-compiler/developer-guide-reference/2023-0/fpe-all.html
    #FFLAGS+=" -fpe-all=0" # Floating point exception trapping.

    # https://www.intel.com/content/www/us/en/docs/fortran-compiler/developer-guide-reference/2023-0/check.html
    # FFLAGS+=" -check all,nobounds,nouninit" # Nek500 fails for array subscript/character substring expressions and uninitialized variables.

    # https://gjbex.github.io/Defensive_programming_and_debugging/CodeValidation/Compilers/ifort_flags/
    # FFLAGS+=" -warn all,noexternal,nointerfaces -diag-enable remark" 

    # https://www.intel.com/content/www/us/en/docs/fortran-compiler/developer-guide-reference/2023-0/stand.html
    # FFLAGS+=" -stand f18" # adhere strictly to the standards of f90/f95/f03/f08/f15 

else

    echo "Compiler found: $(which mpif90)"
    echo "$(mpif90 --version | head -n1)"

    FFLAGS+=" -ffixed-form"             # Enables fixed-form source code, necessary as we mix .f90 files.
    FFLAGS+=" -ffixed-line-length-none" # Allows for any line length in fixed-form source code.
    FFLAGS+=" -march=native"            # Enables all instruction subsets supported by the local machine.
    #FFLAGS+=" -g"                       # Enables debugging information.
    #FFLAGS+=" -fbacktrace"              # Provides a backtrace in case of errors, useful for debugging.
    USR_LFLAGS+=" -llapack -lblas"
# -Wall -Wline-truncation -Wcharacter-truncation -Wsurprising -Waliasing -Wimplicit-interface -Wunused-parameter -fwhole-file -fcheck=all -std=f2008 -pedantic -fbacktrace


# https://people.ucsc.edu/~imay1/_static/AM129_F22/chapters/chapt02/ch02_fortran_flags.html
    #FFLAGS+=" -fanalyzer" # Enable the Clang Static Analyzer for code analysis
    # FFLAGS+=" -Ofast" # Enable aggressive optimization level for maximum performance
    # FFLAGS+=" -ffast-math" # Enable fast math optimizations for floating-point operations
    # FFLAGS+=" -funsafe-math-optimizations" # Enable unsafe math optimizations for improved performance

    # comment Nek5000/core/makenek.inc:226 with : sed -i '226s/^/#/' $HOME/nextStab/Nek5000/core/makenek.inc
    #FFLAGS+=" -std=legacy -w" # Provides a backtrace in case of errors, useful for debugging.
    #FFLAGS+=" -std=legacy -Wall" # Provides a backtrace in case of errors, useful for debugging.

fi
#-------------------------------------------------------------------------------
# Architecture Detection
#-------------------------------------------------------------------------------
case $(uname -s) in
Darwin)
    case $(uname -p) in
    x86_64) ar="x86_64" ;;
    arm) ar="arm" ;; # not compatile with mcmodel=large
    esac
    ;;
Linux)
    case $(uname -p) in
    x86_64)
        ar="x86_64"
        FFLAGS+=" -mcmodel=large"
        ;;
    arm) ar="arm" ;;
    esac
    ;;
esac
#-------------------------------------------------------------------------------
# Linking with LAPACK and BLAS
#-------------------------------------------------------------------------------
# Lapack is a library of linear algebra routines.
# Blas (Basic Linear Algebra Subprograms) is used by Lapack.
# if [ "$FC" = "mpif90" ]; then
#     if ldconfig -p | grep -q libopenblas; then
#         echo "OpenBLAS exists in path, using it:"
        #  export USR_LFLAGS+=" -lopenblas"
         #find $CONDA_PREFIX -name libopenblas*
        # export USR_LFLAGS+=" -L/home/rfrantz/miniforge3/pkgs/openblas-0.3.27-pthreads_h7a3da1a_0/lib/"

        

#         # export USR_LFLAGS+=" -L/usr/local/opt/openblas/lib"
#         # export FFLAGS+=" -I/usr/local/opt/openblas/include"
#     else
# echo "OpenBLAS does not exist, using LAPACK and BLAS:"
# export USR_LFLAGS+=" -llapack -lblas"
#     fi
# fi
#-------------------------------------------------------------------------------
# LD="$FC" # linker !
#-------------------------------------------------------------------------------
# Final Preparations
#-------------------------------------------------------------------------------
FFLAGS+=" -DNVERSION=\"'${N_VERSION}'\" -DNSVERSION=\"'${NS_VERSION}'\""
export FFLAGS

# User-specified object files
USR="krylov_subspace.o"
USR+=" matvec.o"
USR+=" quicksort.o"
USR+=" krylov_decomposition.o"
USR+=" eigensolvers.o"
USR+=" lapack_wrapper.o"
USR+=" fixedp.o"
USR+=" main.o"
USR+=" utils.o"
USR+=" IO.o"
USR+=" postproc.o"
USR+=" newton_krylov.o"
USR+=" sensitivity.o"
USR+=" forcing.o"
USR+=" nek_vectors.o"

# Check if the makefile_usr file exists and source it
if [ -f "makefile_usr" ]; then
    source makefile_usr
fi
export USR

# Output summary of settings
echo "Nek5000 version: $N_VERSION"
echo "nekStab version: $NS_VERSION"
echo "preparing compilation with: $(
    which $FC
    echo $FFLAGS $USR_LFLAGS
)"

# Update makefile and static variables
cp -v $NEKSTAB_SOURCE_ROOT/core/NEKSTAB NEKSTAB.inc

# appends `include 'NEKSTAB.inc'` to `SIZE` if not present.
FILE="SIZE"
INCLUDE_LINE="include 'NEKSTAB.inc'" # respect spaces
grep -q "^ *$INCLUDE_LINE" "SIZE" || echo -e "\n      $INCLUDE_LINE" >> "$FILE"

# Define the file and the include line
FILE="makefile_usr.inc"
INCLUDE_LINE="include $NEKSTAB_SOURCE_ROOT/core/makefile_nekStab"
# Check if the file exists
if [ -f "$FILE" ]; then
    # Check if an include line for makefile_nekStab is in the file
    if grep -q "^include .*makefile_nekStab" "$FILE"; then
        # The include line is in the file, replace it
        sed -i "s|^include .*makefile_nekStab|$INCLUDE_LINE|" "$FILE"
    else
        # The include line is not in the file, append it
        echo -e "\n$INCLUDE_LINE" >>"$FILE"
    fi
else
    # The file does not exist, create it with the include line
    echo "$INCLUDE_LINE" >"$FILE"
fi

set +a -e
$NEK_SOURCE_ROOT/bin/nekconfig $@
if [[ $1 != "clean" ]]; then
    $NEK_SOURCE_ROOT/bin/nekconfig -build-dep
    set -o pipefail
    touch $1.usr
    make -j4 2>&1 | tee -a build.log
    set +o pipefail
fi

if [ $(ls *.mod 2>/dev/null | wc -l) -gt 0 ]; then
    mv *.mod obj
fi
if [ $(ls *.smod 2>/dev/null | wc -l) -gt 0 ]; then
    mv *.smod obj
fi