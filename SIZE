c
c     Include file to dimension static arrays
c     and to set some hardwired run-time parameters
c
      integer ldim,lx1,lxd,lx2,lx1m,lelg,lelt,lpmin,ldimt
      integer lpelt,lbelt,toteq,lcvelt
      integer lelx,lely,lelz,mxprev,lgmres,lorder,lhis
      integer maxobj,lpert,nsessmax,lxo
      integer lfdm,ldimt_proj,lelr

      ! BASIC
      parameter (ldim=2)               ! domain dimension (2 or 3)
      parameter (lx1=06)!06,08,10,12   ! GLL points per element along each direction
      parameter (lxd=09)!09,12,15,18   ! GL  points for over-integration (dealiasing)
      parameter (lx2=lx1-2)            ! GLL points for pressure (lx1 or lx1-2)

      parameter (lelg=2520)            ! max number of global elements
      parameter (lpmin=  8)            ! min number of MPI ranks
      parameter (lelt=lelg/lpmin + 3)  ! max number of local elements per MPI rank
      parameter (ldimt=3)              ! max auxiliary fields (temperature + scalars)

      ! OPTIONAL
      parameter (ldimt_proj=1)         ! max auxiliary fields residual projection
      parameter (lelr=lelt)            ! max number of local elements per restart file
      parameter (lhis=2 )              ! max history/monitoring points
      parameter (maxobj=1)             ! max number of objects
      parameter (lpert=1)              ! max number of perturbations
      parameter (toteq=1)              ! max number of conserved scalars in CMT
      parameter (nsessmax=1)           ! max sessions to NEKNEK
      parameter (lxo=lx1)              ! max GLL points on output (lxo>=lx1)
      parameter (mxprev=20)            ! max dim of projection space
      parameter (lgmres=30)            ! max dim Krylov space
      parameter (lorder=3)             ! max order in time
      parameter (lx1m=1)               ! GLL points mesh solver
      parameter (lfdm=0)               ! unused
      parameter (lelx=1,lely=1,lelz=1) ! global tensor mesh dimensions
      parameter (lbelt=1)              ! lelt for mhd
      parameter (lpelt=lelt)           ! lelt for linear stability
      parameter (lcvelt=1)             ! lelt for cvode
      ! INTERNALS
      include 'SIZE.inc'

      ! LINEAR STABILITY

      logical, parameter :: ifnois = .true.
      logical, parameter :: ifldbf = .true.

      character(len=80), parameter :: bf_handle = 'BF_1cyl0.f00001'

      integer, parameter :: k_dim  = 60
      integer, parameter :: schur_tgt  = 4 !schur on if >1

      real, parameter    :: eigen_tol  = 1.0E-6 !standard value
      real, parameter    :: schur_del  = 0.10D0

      logical              ifbfcv
      common /lst_logical/ ifbfcv

      real ubase(lx1,ly1,lz1,lelt)
     $    ,vbase(lx1,ly1,lz1,lelt)
     $    ,wbase(lx1,ly1,lz1,lelt)
      common /baseflow/ ubase,vbase,wbase

      real fcx(lx1,ly1,lz1,lelt)
     $    ,fcy(lx1,ly1,lz1,lelt)
     $    ,fcz(lx1,ly1,lz1,lelt)
      common /force/ fcx, fcy, fcz !general forcing array

      real spng_fun(LX1*LY1*LZ1*LELV)     ! sponge function
     $    ,spng_vr(LX1*LY1*LZ1*LELV,LDIM) ! reference velocity field
      common /SPONGEV/ spng_fun, spng_vr
      real spng_str      !var sponge strength
      real spng_wl(LDIM) !var sponge width (left section; every dmension separately)
      real spng_wr(LDIM) !var sponge width (right section)
      real spng_dl(LDIM) !var sponge drop/rise width (left section)
      real spng_dr(LDIM) !var sponge drop/rise width (right section)
      common /SPONGER/ spng_str, spng_wl, spng_wr, spng_dl, spng_dr
